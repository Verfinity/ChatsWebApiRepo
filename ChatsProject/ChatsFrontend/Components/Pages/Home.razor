@page "/chats"
@inject NavigationManager NavigationManager
@inject IAuthHttpClient AuthHttpClient
@inject IUserAuthorizer UserAuthorizer

<div class="main-container">
    <div class="chats-container">
        @if (CurrentUser != null)
        {
            <UserAccountComponent UserName="@CurrentUser.NickName" OnSignOutButtonClickCallback="SignOutUserAsync" />
            <ChatFinderComponent />

            @foreach (var chat in CurrentUser.Chats)
            {
                <ChatComponent ChatData="chat" OnClickCallback="ChangeCurrentChatAsync" />
            }
        }
    </div>
    <div class="chat-data-container">
        @if (CurrentChat != null)
        {
            <div class="messages-container">
                @if (CurrentChat.Posts != null)
                {
                    foreach (var post in CurrentChat.Posts)
                    {
                        if (post.UserId != CurrentUser.Id)
                        {
                            <InputMessageComponent AuthorName="@post.User.NickName" Content="@post.Content" />
                        }
                        else
                        {
                            <OutputMessageComponent Content="@post.Content" />
                        }
                    }
                }
            </div>
            <InputFieldComponent />
        }
    </div>
</div>

@code {
    public User? CurrentUser = null;
    public Chat? CurrentChat = null;

    protected override async Task OnInitializedAsync()
    {
        if (await AuthHttpClient.IsAuthorizeAsync() == false)
        {
            NavigationManager.NavigateTo("login");
            return;
        }

        CurrentUser = await AuthHttpClient.GetAsync<User>("users/current-user");
        if (CurrentUser == null)
        {
            NavigationManager.NavigateTo("login");
            return;
        }
    }

    public async Task SignOutUserAsync()
    {
        await UserAuthorizer.SignOutUserAsync();
        NavigationManager.NavigateTo("login");
    }

    public async Task ChangeCurrentChatAsync(Chat newCurrentChat)
    {
        CurrentChat = newCurrentChat;
        if (CurrentChat.Posts == null || CurrentChat.Posts.Count() == 0)
        {
            CurrentChat.Posts = await AuthHttpClient.GetAsync<List<Post>>($"posts/?chatId={CurrentChat.Id}");
        }
    }
}
