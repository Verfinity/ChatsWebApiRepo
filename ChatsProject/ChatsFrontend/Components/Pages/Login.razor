@page "/login"
@inject NavigationManager NavigationManager
@inject IAuthHttpClient AuthHttpClient
@inject ITokenPairSaver TokenPairSaver

<div class="main-container main-login-container">
    <div class="text-container login-form">
        <p class="title-text">Войти в аккаунт</p>
        <div class="field-containers">
            <div class="field-container">
                <p class="field-name">Логин</p>
                <input class="field-input" @bind-value=Nickname />
            </div>
            <div class="field-container">
                <p class="field-name">Пароль</p>
                <input class="field-input" type="password" @bind-value=Password />
            </div>
        </div>
        <div class="login-buttons">
            <button class="text-container login-button" @onclick="async () => await LoginAsync()">Войти</button>
            <button class="registration-button" @onclick="RedirectToRegisterPage">Зарегестрироваться</button>
        </div>
    </div>
</div>

@code {
    public string Nickname = "";
    public string Password = "";

    public async Task LoginAsync()
    {
        if (Nickname == null || Password == null)
            return;

        var loginFields = new LoginFields
            {
                NickName = Nickname,
                Password = Password
            };
        var response = await AuthHttpClient.SendAsync("auth/login", loginFields);

        if (response.StatusCode == HttpStatusCode.OK)
        {
            var tokenPair = await response.Content.ReadFromJsonAsync<TokenPair>();
            await TokenPairSaver.SaveDataAsync(tokenPair);
            NavigationManager.NavigateTo("chats");
        }
    }

    public void RedirectToRegisterPage()
    {
        NavigationManager.NavigateTo("register");
    }
}
